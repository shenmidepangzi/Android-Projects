package de.uni_stuttgart.yi.task1positionlogger;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Calendar;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.widget.Toast;

public class PositionLoggerService extends Service {
	private final String TAG = "PositionLoggerService";
	private LocationManager locationManager;
	private String locationProvider;
	private double longitude;
	private double latitude;
	private double distance;
	private double speed;
	private Calendar timeServiceStarted;
	private File gpsFile;
	private BufferedWriter out;
	
	@Override
	public void onCreate() {
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		timeServiceStarted = Calendar.getInstance();
		distance = 0;//make distance to zero at the beginning
		Toast.makeText(this, "service is started", Toast.LENGTH_SHORT).show();
		//log file
		File sdDir = Environment.getExternalStorageDirectory();
    	gpsFile = new File(sdDir, "gps_data.txt");
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
    	locationProvider = LocationManager.GPS_PROVIDER;
    	LocationListener locationListener = new LocationListener() {
			@Override
			public void onLocationChanged(Location location) {
				double oldLongitude = longitude;
				double oldLatitude = latitude;
				longitude = location.getLongitude();
				latitude = location.getLatitude();
				distance = computeDistance(oldLongitude, oldLatitude, longitude, latitude);
				Calendar rightNow = Calendar.getInstance();
				speed = computeAvgSpeed(distance, rightNow);
				String locationString = longitude + ", " + latitude;
				try {
	            	DateFormat format = DateFormat.getDateTimeInstance();
	            	String time_rightNow = format.format(rightNow.getTime());
	            	out = new BufferedWriter(new FileWriter(gpsFile));
	            	out.append(time_rightNow + " " + locationString + "\n");
	            	out.close();
	    		} catch (IOException e) {
	    			Log.d(TAG, "Could not write to SD card: " + e.getMessage());
	    		}
			}

			@Override
			public void onProviderDisabled(String provider) {
			}

			@Override
			public void onProviderEnabled(String provider) {
			}

			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
			}
    	};
    	locationManager.requestLocationUpdates(locationProvider, 0, 0, locationListener);
    	
		return 0;
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		return mBinder;
	}
	
	@Override
	public void onDestroy() {
		Toast.makeText(this, "service is stopped", Toast.LENGTH_SHORT).show();
	}
	
	private final IPositionLoggerService.Stub mBinder = new IPositionLoggerService.Stub() {
		@Override
		public String getLocation() throws RemoteException {
        	return longitude + " " + latitude;
		}

		@Override
		public String getDistance() throws RemoteException {
			return distance + "m";
		}

		@Override
		public String getAverageSpeed() throws RemoteException {
			return speed + "m/s";
		}
    };

    private double computeDistance(double x1, double y1, double x2, double y2) {
    	return 0;
    }
    
    private double computeAvgSpeed(double distance, Calendar rightNow) {
    	long timeDiff = rightNow.getTimeInMillis() - timeServiceStarted.getTimeInMillis();
    	return distance * 1000.0 / timeDiff;
    }
}
